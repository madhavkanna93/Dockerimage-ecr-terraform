name: Terraform-Github-Actions

on:
  push:
    branches:
    - main
  pull_request:

permissions:
  contents: read

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
          
    - name: Push to ECR
        id: tag
        run: |
          aws ecr get-login-password --region ${region}  | docker login --username AWS --password-stdin ${accountid}.dkr.ecr.${region}.amazonaws.com
          docker build --tag ${accountid}.dkr.ecr.${region}.amazonaws.com/${ecr_repository}:v1.${GITHUB_RUN_NUMBER} .

          docker push ${accountid}.dkr.ecr.${region}.amazonaws.com/${ecr_repository}:v1.${GITHUB_RUN_NUMBER}
        env:
          accountid: ${{ secrets.ACCOUNTID}}
          region: ${{ secrets.REGION }}
          ecr_repository: ${{ secrets.ECR_REPOSITORY }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: | 
        cd infrastructure
        terraform init -input=false -backend-config="bucket=psi-lambda-function" -backend-config="key=terraform.tfstate"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: |
        cd infrastructure
        terraform validate 

    # Generates an execution plan for Terraform
    - name: Terraform Plan & Apply
      run: | 
        cd infrastructure
        terraform plan -input=false -var-file dev.tfvars -out=tfplan
        terraform apply -input=false -auto-approve tfplan
